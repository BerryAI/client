<!--
@license
Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
-->

<link rel="import" href="../bower_components/polymer/polymer.html">
<link rel="import" href="shared-styles.html">
<link rel="import" href="../bower_components/paper-button/paper-button.html">
<link rel="import" href="../bower_components/paper-input/paper-input.html">
<link rel="import" href="../bower_components/paper-audio-player/paper-audio-player.html">

<dom-module id="my-sample-view">
    <template>
        <style include="shared-styles">
            :host {
                display: block;

                padding: 10px;
            }
        </style>

        <div class="card">
            <paper-input id="ipfs_id" label="ipfs id"></paper-input>
            <paper-button raised on-tap="playFile">Play</paper-button>
            <paper-button raised on-tap="stopPlaying">Pause</paper-button>
            <audio controls autoplay id="player">
                <source id="sourceContainer" type="audio/mpeg" />
            </audio>
        </div>

        <div class="card">
            <paper-input id="file" label="file" type="file"></paper-input>
            <paper-button raised on-tap="loadIntoIPFS">Load</paper-button>
            <p>hash: {{hash}}</p>
        </div>

        <div class="card">
            <p>status: {{status}}</p>
            <p>My coinbase is {{coinbase}}
            <p>My balance is {{balance}}</p>
        </div>
    </template>

    <script>
        var horseMp3 = "QmeVPhqpAhJcdeP6CSFi75GHRFY8HHh7k5Vsn5fAg5SajZ";
        var sampleWav = "QmNpsNioVxMAVGrPwZ5wpLqTbzqUyh54pomATGaoG6eNWH";
        var danMp3 = "QmZjCB1LVp5khCaMqDrCRsyPo26xKTbsh3xE1ytoBiDz4N";
        var danWav = "QmazhzHSygTY48LkVs7EmDkApkje8N9M3EUL8NttmPwGkz";

        window.AudioContext = window.AudioContext || window.webkitAudioContext;

        var Web3 = require('web3');
        var web3 = new Web3();
        web3.setProvider(new web3.providers.HttpProvider('http://localhost:8545'));

        var request = require('request');
        var fs = require('fs');

        var currentContext;

        Polymer({
            is: 'my-sample-view',
            playFile: function() {
                var id = this.$.ipfs_id.value;
                var url = id.startsWith("http") ? id : "http://localhost:8080/ipfs/" + id;
                playFile2(this, this.$.player, this.$.sourceContainer, url);
            },
            stopPlaying: function() {
                this.$.player.pause();
            },
            loadIntoIPFS: function() {
                loadFileIntoIPFS(this, this.$.file.inputElement.value);
            },
            goOnline : function() {
                connectToIPFS(this);
            },
            ready: function() {
                this.coinbase = web3.eth.coinbase;
                this.balance = web3.eth.getBalance(web3.eth.coinbase);
            }
        });

        function loadFileIntoIPFS(caller, path) {
            caller.status = "Loading " + path + "...";
            caller.hash = "Waiting ...";
            var url = "http://localhost:5001/api/v0/add"
            var req = request.post(url, function (err, resp, body) {
                if (err) {
                    caller.status = "Err: " + err;
                } else {
                    caller.status = "Success: Added " + path;
                    caller.hash = JSON.parse(body).Hash;
                }
            });
            req.form().append('file', fs.createReadStream(path));
        }

        function connectToIPFS(caller) {
            caller.status = "Connecting ...";
            ipfs.goOnline(function(err){
                if (err) {
                    caller.status = "Failed to connect";
                    throw err;
                }
                caller.status = ipfs.isOnline() ? "Connected!" : "Failed to connect (no error thrown)";
            });
        }

        function playFile2(caller, player, srcContainer, url) {
            caller.status = "Playing " + url;
            srcContainer.src = url;
            player.load();
        }

        function playFile(caller, id) {
            if (currentContext) {
                currentContext.close();
            }
            currentContext = new AudioContext();
            caller.status = "Loading from ipfs...";
            ipfs.files.cat(id, function(err, file) {
                if (err) {
                    caller.status = err;
                    throw err;
                }
                const chunks = [];
                file.on("data", function (chunk) {
                    caller.status = "Receiving chunks...";
                    chunks.push(chunk);
                });
                // Send the buffer or you can put it into a var
                file.on("end", function () {
                    caller.status = "Decoding...";
                    node = {};
                    node.retry = 0;
                    node.buf = toArrayBuffer(Buffer.concat(chunks));
                    decode(caller, node);
//                    currentContext.decodeAudioData(toArrayBuffer(Buffer.concat(chunks)),
//                        function(decoded) {
//                            caller.status = "Playing...";
//                            playSound(currentContext, decoded);
//                        },
//                        function(err) {
//                            caller.status = "Decoded failed: Err: " + err;
//                            console.log("Failed!  " + err);
//                        }
//                    );
                });
            });
        }

        function syncStream(node){ // should be done by api itself. and hopefully will.
            var buf8 = new Uint8Array(node.buf);
            buf8.indexOf = Array.prototype.indexOf;
            var i=node.sync, b=buf8;
            while(1) {
                node.retry++;
                i=b.indexOf(0xFF,i); if(i==-1 || (b[i+1] & 0xE0 == 0xE0 )) break;
                i++;
            }
            if(i!=-1) {
                var tmp=node.buf.slice(i); //careful there it returns copy
                delete(node.buf); node.buf=null;
                node.buf=tmp;
                node.sync=i;
                return true;
            }
            return false;
        }

        function decode(caller, node) {
            try{
                currentContext.decodeAudioData(node.buf,
                        function(decoded){
                            caller.status = "Playing ...";
                            node.source  = currentContext.createBufferSource();
                            node.source.connect(currentContext.destination);
                            node.source.buffer=decoded;
                            node.source.start();
                        },
                        function(err){ // only on error attempt to sync on frame boundary
                            caller.status = "Failed " + node.retry + " times, err:" + err;
                            if(syncStream(node)) decode(caller, node);
                        });
            } catch(e) {
                caller.status = "Failed: " + e.message;
                log('decode exception',e.message);
            }
        }

        function playSound(context, buffer) {
            console.log("Playing sound...");
            var source = context.createBufferSource(); // creates a sound source
            source.buffer = buffer;                    // tell the source which sound to play
            source.connect(context.destination);       // connect the source to the context's destination (the speakers)
            source.start(0);                           // play the source now
                                                       // note: on older systems, may have to use deprecated noteOn(time);
        }

        function toArrayBuffer(buf) {
            // I'm sure there is a better way to do this...
            var ab = new ArrayBuffer(buf.length);
            var view = new Uint8Array(ab);
            for (var i = 0; i < buf.length; ++i) {
                view[i] = buf[i];
            }
            return ab;

            // var b = buf;
            // var ab = b.buffer.slice(b.byteOffset, b.byteOffset + b.byteLength);
            // return new Uint32Array(b.buffer, b.byteOffset, b.byteLength / Uint32Array.BYTES_PER_ELEMENT);
        }
    </script>
</dom-module>
